# app/models.py

# üîπ –ò–º–ø–æ—Ä—Ç SQLAlchemy –æ–±—ä–µ–∫—Ç–∞ db
from app import db

# üîπ –ú–æ–¥–µ–ª—å "–í–∏–¥ –∏–∑–¥–µ–ª–∏—è"
class View(db.Model):
    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∏–¥–∞
    id = db.Column(db.Integer, primary_key=True)

    # –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–∞ –∏–∑–¥–µ–ª–∏—è (—É–Ω–∏–∫–∞–ª—å–Ω–æ–µ)
    name = db.Column(db.String(64), nullable=False, unique=True)

    # –û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–∞ –∏–∑–¥–µ–ª–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ)
    description = db.Column(db.String(50), nullable=True)

    def __repr__(self):
        return f'<View id={self.id} name={self.name}>'

# –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑–¥–µ–ª–∏—è, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º –≤–∏–¥–æ–º
class Category(db.Model):
    id = db.Column(db.Integer, primary_key=True)

    # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "GLASS" –∏–ª–∏ "METAL")
    name = db.Column(db.String(50), nullable=False)

    # –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    description = db.Column(db.Text)

    # –°–≤—è–∑—å —Å –≤–∏–¥–æ–º –∏–∑–¥–µ–ª–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞)
    view_id = db.Column(db.Integer, db.ForeignKey('view.id'), nullable=False)

    # –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –º–æ–¥–µ–ª–∏ View
    view = db.relationship('View', backref=db.backref('categories', lazy=True))

    # –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –≤–∏–¥–∞
    __table_args__ = (
        db.UniqueConstraint('view_id', 'name', name='uix_view_category'),
    )


# üîπ –ú–æ–¥–µ–ª—å "–ê—Ä—Ç–∏–∫—É–ª –∏–∑–¥–µ–ª–∏—è"
class Article(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    code = db.Column(db.String(64), nullable=False, unique=True)
    description = db.Column(db.String(256))

    # –¢–æ—á–Ω—ã–π –≤–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 74.637)
    weight_real = db.Column(db.Float(precision=5), nullable=False)

    # –£—Ä–æ–≤–µ–Ω—å –∞—Ä—Ç–∏–∫—É–ª–∞: 1 ‚Äî —Å–±–æ—Ä–∫–∞, 2‚Äì3 ‚Äî –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, 4 ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
    level = db.Column(db.String(1), nullable=False, default="0")

    # –û–∫—Ä—É–≥–ª—ë–Ω–Ω—ã–π –≤–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 74.6)
    weight_code = db.Column(db.Float(precision=1), nullable=False)

    def __repr__(self):
        return f'<Article id={self.id} code={self.code}>'


# üîß –ú–æ–¥–µ–ª—å –∏–∑–¥–µ–ª–∏—è ‚Äî –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –≤–∏–¥—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∞—Ä—Ç–∏–∫—É–ª–∞—Ö (2 —Ü–∏—Ñ—Ä—ã: 01, 12 –∏ —Ç.–¥.)
class Model(db.Model):
    __tablename__ = 'model'

    id = db.Column(db.Integer, primary_key=True)

    # –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Classic", "Urban")
    name = db.Column(db.String(50), nullable=False)

    # –ö–æ–¥ –º–æ–¥–µ–ª–∏ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ (–¥–≤–µ —Ü–∏—Ñ—Ä—ã: "01", "12")
    code = db.Column(db.String(2), nullable=False)

    # –û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    description = db.Column(db.Text)

    # –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –≤–∏–¥—É
    view_id = db.Column(db.Integer, db.ForeignKey('view.id'), nullable=False)
    view = db.relationship('View', backref=db.backref('models', lazy=True))

    # –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_id = db.Column(db.Integer, db.ForeignKey('category.id'), nullable=False)
    category = db.relationship('Category', backref=db.backref('models', lazy=True))

    # –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≤–∏–¥–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–¥ –º–æ–¥–µ–ª–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª–µ–Ω
    __table_args__ = (
        db.UniqueConstraint('view_id', 'category_id', 'code', name='uix_view_category_model_code'),
    )

    def __repr__(self):
        return f"<Model {self.code} - {self.name}>"

# üé® –ú–æ–¥–µ–ª—å Color ‚Äî –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –≤ –∞—Ä—Ç–∏–∫—É–ª–∞—Ö
class Color(db.Model):
    id = db.Column(db.Integer, primary_key=True)

    # –î–≤—É–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ —Ü–≤–µ—Ç–∞, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π –≤ –∞—Ä—Ç–∏–∫—É–ª–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '01', '99')
    code = db.Column(db.String(2), nullable=False, unique=True)

    # –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ë–µ–ª—ã–π –º–∞—Ç–æ–≤—ã–π")
    name = db.Column(db.String(50), nullable=False, unique=True)

    # –û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏)
    description = db.Column(db.Text)


from werkzeug.security import generate_password_hash, check_password_hash
from flask_login import UserMixin
from .extensions import db


class User(db.Model, UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(128), nullable=False)
    role = db.Column(db.String(20), default='user')  # admin / user / manager

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

    def __repr__(self):
        return f'<User {self.email}>'

from app.extensions import login_manager

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))



