# –ò–º–ø–æ—Ä—Ç—ã Flask
from flask import Blueprint, render_template, redirect, url_for, flash, request, jsonify

# –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
from app.models import View, Article
from app.forms import ViewForm, EditArticleForm  # –î–æ–±–∞–≤–∏–ª–∏ –∏–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–π —Ñ–æ—Ä–º—ã
from app.forms import CategoryForm
from app.models import Category, View
from flask import render_template, redirect, url_for, flash, request
from app import db


# üîπ –°–æ–∑–¥–∞–Ω–∏–µ Blueprint –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
main = Blueprint('main', __name__)

# --- –ú–∞—Ä—à—Ä—É—Ç—ã —Ä–∞–±–æ—Ç—ã —Å –í–∏–¥–∞–º–∏ –∏–∑–¥–µ–ª–∏–π ---

# üîπ –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –í–∏–¥–∞ –∏–∑–¥–µ–ª–∏—è
@main.route('/add_view', methods=['GET', 'POST'])
def add_view():
    form = ViewForm()
    if form.validate_on_submit():
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –í–∏–¥
        existing_view = View.query.filter_by(name=form.name.data).first()
        if existing_view:
            flash('–¢–∞–∫–æ–π –≤–∏–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!', 'warning')
            return redirect(url_for('main.index'))

        # –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –í–∏–¥ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º
        new_view = View(
            name=form.name.data,
            description=form.description.data
        )
        db.session.add(new_view)
        db.session.commit()
        flash('–í–∏–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!', 'success')
        return redirect(url_for('main.index'))

    # –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –í–∏–¥–∞
    return render_template('add_view.html', form=form)


@main.route('/add_category', methods=['GET', 'POST'])
def add_category():
    form = CategoryForm()

    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–∏–¥–æ–≤ –¥–ª—è SelectField
    form.view.choices = [(v.id, v.name) for v in View.query.order_by(View.name).all()]

    if form.validate_on_submit():
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–¥–Ω–æ–≥–æ –≤–∏–¥–∞
        existing = Category.query.filter_by(name=form.name.data, view_id=form.view.data).first()
        if existing:
            flash('–¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–º –≤–∏–¥–µ!', 'warning')
        else:
            category = Category(
                name=form.name.data,
                description=form.description.data,
                view_id=form.view.data
            )
            db.session.add(category)
            db.session.commit()
            flash('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!', 'success')
            return redirect(url_for('main.index'))

    return render_template('add_category.html', form=form)


# üîπ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –í–∏–¥–æ–≤ –∏–∑–¥–µ–ª–∏–π
@main.route('/', methods=['GET', 'POST'])
def index():
    from app.forms import FilterForm
    form = FilterForm()

    views = View.query.order_by(View.name).all()
    selected_view_id = request.form.get("view")

    categories = []
    if selected_view_id and selected_view_id != "add_new":
        try:
            selected_view_id_int = int(selected_view_id)
            categories = Category.query.filter_by(view_id=selected_view_id_int).order_by(Category.name).all()
        except ValueError:
            categories = []

    return render_template('index.html',
                           views=views,
                           categories=categories,
                           selected_view_id=selected_view_id,
                           form=form)


# --- –ú–∞—Ä—à—Ä—É—Ç—ã —Ä–∞–±–æ—Ç—ã —Å –ê—Ä—Ç–∏–∫—É–ª–∞–º–∏ ---

# üîπ –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ê—Ä—Ç–∏–∫—É–ª–∞
@main.route('/generator', methods=['POST'])
def generator():
    article_code = request.form.get('article_code')
    description = request.form.get('article_description')

    if not article_code:
        flash('–û—à–∏–±–∫–∞: –ö–æ–¥ –∞—Ä—Ç–∏–∫—É–ª–∞ –ø—É—Å—Ç–æ–π.', 'danger')
        return redirect(url_for('main.index'))

    existing = Article.query.filter_by(code=article_code).first()
    if existing:
        flash('–¢–∞–∫–æ–π –∞—Ä—Ç–∏–∫—É–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!', 'warning')
    else:
        new_article = Article(code=article_code, description=description)
        db.session.add(new_article)
        db.session.commit()
        flash('–ê—Ä—Ç–∏–∫—É–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.', 'success')

    return redirect(url_for('main.list_articles'))

# üîπ –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤
@main.route('/articles')
def list_articles():
    articles = Article.query.order_by(Article.id.desc()).all()
    return render_template('list_articles.html', articles=articles)

# üîπ –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞
@main.route('/get_prefix', methods=['POST'])
def get_prefix():
    partial_code = request.json.get('partial_code')
    if not partial_code or not isinstance(partial_code, str):
        return jsonify({'error': 'Invalid partial_code'}), 400
    matches = Article.query.filter(Article.code.like(f"{partial_code}%")).all()
    existing_prefixes = [int(a.code.split('-')[-1]) for a in matches if a.code.split('-')[-1].isdigit()]
    next_prefix = max(existing_prefixes, default=0) + 1
    return jsonify({'prefix': next_prefix})

# --- –ù–û–í–û–ï: –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ê—Ä—Ç–∏–∫—É–ª–æ–≤ ---

# üîπ –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–¥–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞
@main.route('/view_article/<int:article_id>')
def view_article(article_id):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–¥–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞ –ø–æ –µ–≥–æ ID
    """
    article = Article.query.get_or_404(article_id)

    # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –≤–∏–¥ –∏–∑–¥–µ–ª–∏—è –ø–æ –ø–µ—Ä–≤–æ–π –±—É–∫–≤–µ –∫–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–∞
    view = None
    if article.code:
        first_letter = article.code[0]
        view = View.query.filter(View.name.startswith(first_letter)).first()

    return render_template('view_article.html', article=article, view=view)


# üîπ –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞
@main.route('/edit_article/<int:article_id>', methods=['GET', 'POST'])
def edit_article(article_id):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞ –∏ –µ–≥–æ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –í–∏–¥–∞
    """
    article = Article.query.get_or_404(article_id)
    form = EditArticleForm(obj=article)

    # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –≤–∏–¥ –∏–∑–¥–µ–ª–∏—è –ø–æ –ø–µ—Ä–≤–æ–π –±—É–∫–≤–µ –∫–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–∞
    view = None
    if article.code:
        first_letter = article.code[0]
        view = View.query.filter(View.name.startswith(first_letter)).first()

    if form.validate_on_submit():
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞
        article.description = form.description.data

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥–∞–ª –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –í–∏–¥–∞ –∏–∑–¥–µ–ª–∏—è
        if view:
            view.name = request.form.get('view_name') or view.name
            view.description = request.form.get('view_description') or view.description

        db.session.commit()
        flash('–ê—Ä—Ç–∏–∫—É–ª –∏ –≤–∏–¥ –∏–∑–¥–µ–ª–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!', 'success')
        return redirect(url_for('main.view_article', article_id=article.id))

    return render_template('edit_article.html', form=form, article=article, view=view)

# üîπ –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –í–∏–¥–∞ –∏–∑–¥–µ–ª–∏—è
@main.route('/delete_view/<int:view_id>', methods=['POST'])
def delete_view(view_id):
    view = View.query.get_or_404(view_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –∞—Ä—Ç–∏–∫—É–ª—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –≤–∏–¥–æ–º
    linked_articles = Article.query.filter(Article.code.startswith(view.name)).all()

    if linked_articles:
        flash('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å: —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∞—Ä—Ç–∏–∫—É–ª—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –≤–∏–¥–æ–º.', 'danger')
        return redirect(url_for('main.index'))

    db.session.delete(view)
    db.session.commit()
    flash('–í–∏–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!', 'success')
    return redirect(url_for('main.index'))

# üîπ –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –í–∏–¥–æ–≤ –∏–∑–¥–µ–ª–∏–π
@main.route('/views')
def list_views():
    views = View.query.order_by(View.name).all()
    return render_template('list_views.html', views=views)

